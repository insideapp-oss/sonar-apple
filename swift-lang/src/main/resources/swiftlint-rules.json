[
    {
        "key": "anyobject_protocol",
        "name": "AnyObject Protocol",
        "severity": "MINOR",
        "description": "Prefer using `AnyObject` over `class` for class-only protocols.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "array_init",
        "name": "Array Init",
        "severity": "MINOR",
        "description": "Prefer using `Array(seq)` over `seq.map { $0 }` to convert a sequence into an Array.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "attributes",
        "name": "Attributes",
        "severity": "MINOR",
        "description": "Attributes should be on their own lines in functions and types, but on the same line as variables and imports.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "block_based_kvo",
        "name": "Block Based KVO",
        "severity": "MINOR",
        "description": "Prefer the new block based KVO API with keypaths when using Swift 3.2 or later.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "class_delegate_protocol",
        "name": "Class Delegate Protocol",
        "severity": "MINOR",
        "description": "Delegate protocols should be class-only so they can be weakly referenced.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "closing_brace",
        "name": "Closing Brace Spacing",
        "severity": "MINOR",
        "description": "Closing brace with closing parenthesis should not have any whitespaces in the middle.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "closure_body_length",
        "name": "Closure Body Length",
        "severity": "MAJOR",
        "description": "Closure bodies should not span too many lines.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "10min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "closure_end_indentation",
        "name": "Closure End Indentation",
        "severity": "MINOR",
        "description": "Closure end should have the same indentation as the line that started it.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "closure_parameter_position",
        "name": "Closure Parameter Position",
        "severity": "MINOR",
        "description": "Closure parameters should be on the same line as opening brace.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "closure_spacing",
        "name": "Closure Spacing",
        "severity": "MINOR",
        "description": "Closure expressions should have a single space inside each brace.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "collection_alignment",
        "name": "Collection Element Alignment",
        "severity": "MINOR",
        "description": "All elements in a collection literal should be vertically aligned",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "colon",
        "name": "Colon",
        "severity": "MINOR",
        "description": "Colons should be next to the identifier when specifying a type and next to the key in dictionary literals.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "comma",
        "name": "Comma Spacing",
        "severity": "MINOR",
        "description": "There should be no space before and one after any comma.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "compiler_protocol_init",
        "name": "Compiler Protocol Init",
        "severity": "MINOR",
        "description": "The initializers declared in compiler protocols such as `ExpressibleByArrayLiteral` shouldn't be called directly.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "conditional_returns_on_newline",
        "name": "Conditional Returns on Newline",
        "severity": "MINOR",
        "description": "Conditional statements should always return on the next line",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "contains_over_filter_count",
        "name": "Contains Over Filter Count",
        "severity": "MINOR",
        "description": "Prefer `contains` over comparing `filter(where:).count` to 0.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "contains_over_filter_is_empty",
        "name": "Contains Over Filter Is Empty",
        "severity": "MINOR",
        "description": "Prefer `contains` over using `filter(where:).isEmpty`",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "contains_over_first_not_nil",
        "name": "Contains over first not nil",
        "severity": "MINOR",
        "description": "Prefer `contains` over `first(where:) != nil` and `firstIndex(where:) != nil`.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "control_statement",
        "name": "Control Statement",
        "severity": "MINOR",
        "description": "`if`, `for`, `guard`, `switch`, `while`, and `catch` statements shouldn't unnecessarily wrap their conditionals or arguments in parentheses.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "convenience_type",
        "name": "Convenience Type",
        "severity": "MINOR",
        "description": "Types used for hosting only static members should be implemented as a caseless enum to avoid instantiation.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "custom_rules",
        "name": "Customs",
        "severity": "MINOR",
        "description": "Create custom rules by providing a regex string. Optionally specify what syntax kinds to match against, the severity level, and what message to display.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "cyclomatic_complexity",
        "name": "Cyclomatic Complexity",
        "severity": "CRITICAL",
        "description": "Complexity of function bodies should be limited.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "30min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "deployment_target",
        "name": "Deployment Target",
        "severity": "MINOR",
        "description": "Availability checks or attributes shouldn't be using older versions that are satisfied by the deployment target.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "discarded_notification_center_observer",
        "name": "Discarded Notification Center Observer",
        "severity": "MINOR",
        "description": "When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "discouraged_direct_init",
        "name": "Discouraged Direct Initialization",
        "severity": "MINOR",
        "description": "Discouraged direct initialization of types that can be harmful.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "discouraged_object_literal",
        "name": "Discouraged Object Literal",
        "severity": "MINOR",
        "description": "Prefer initializers over object literals.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "discouraged_optional_boolean",
        "name": "Discouraged Optional Boolean",
        "severity": "MINOR",
        "description": "Prefer non-optional booleans over optional booleans.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "discouraged_optional_collection",
        "name": "Discouraged Optional Collection",
        "severity": "MINOR",
        "description": "Prefer empty collection over optional collection.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "duplicate_enum_cases",
        "name": "Duplicate Enum Cases",
        "severity": "MINOR",
        "description": "Enum can't contain multiple cases with the same name.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "BUG"
    },
    {
        "key": "duplicate_imports",
        "name": "Duplicate Imports",
        "severity": "MINOR",
        "description": "Imports should be unique.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "dynamic_inline",
        "name": "Dynamic Inline",
        "severity": "MINOR",
        "description": "Avoid using 'dynamic' and '@inline(__always)' together.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "BUG"
    },
    {
        "key": "empty_collection_literal",
        "name": "Empty Collection Literal",
        "severity": "MINOR",
        "description": "Prefer checking `isEmpty` over comparing collection to an empty array or dictionary literal.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "empty_count",
        "name": "Empty Count",
        "severity": "MINOR",
        "description": "Prefer checking `isEmpty` over comparing `count` to zero.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "empty_enum_arguments",
        "name": "Empty Enum Arguments",
        "severity": "MINOR",
        "description": "Arguments can be omitted when matching enums with associated types if they are not used.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "empty_parameters",
        "name": "Empty Parameters",
        "severity": "MINOR",
        "description": "Prefer `() -> ` over `Void -> `.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "empty_parentheses_with_trailing_closure",
        "name": "Empty Parentheses with Trailing Closure",
        "severity": "MINOR",
        "description": "When using trailing closures, empty parentheses should be avoided after the method call.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "empty_string",
        "name": "Empty String",
        "severity": "MINOR",
        "description": "Prefer checking `isEmpty` over comparing `string` to an empty string literal.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "empty_xctest_method",
        "name": "Empty XCTest Method",
        "severity": "MINOR",
        "description": "Empty XCTest method should be avoided.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "explicit_acl",
        "name": "Explicit ACL",
        "severity": "MINOR",
        "description": "All declarations should specify Access Control Level keywords explicitly.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "explicit_enum_raw_value",
        "name": "Explicit Enum Raw Value",
        "severity": "MINOR",
        "description": "Enums should be explicitly assigned their raw values.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "explicit_init",
        "name": "Explicit Init",
        "severity": "MINOR",
        "description": "Explicitly calling .init() should be avoided.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "explicit_self",
        "name": "Explicit Self",
        "severity": "MINOR",
        "description": "Instance variables and functions should be explicitly accessed with 'self.'.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "explicit_top_level_acl",
        "name": "Explicit Top Level ACL",
        "severity": "MINOR",
        "description": "Top-level declarations should specify Access Control Level keywords explicitly.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "explicit_type_interface",
        "name": "Explicit Type Interface",
        "severity": "MINOR",
        "description": "Properties should have a type interface",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "extension_access_modifier",
        "name": "Extension Access Modifier",
        "severity": "MINOR",
        "description": "Prefer to use extension access modifiers",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "fallthrough",
        "name": "Fallthrough",
        "severity": "MINOR",
        "description": "Fallthrough should be avoided.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "fatal_error_message",
        "name": "Fatal Error Message",
        "severity": "MINOR",
        "description": "A fatalError call should have a message.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "file_header",
        "name": "File Header",
        "severity": "MINOR",
        "description": "Header comments should be consistent with project patterns. The SWIFTLINT_CURRENT_FILENAME placeholder can optionally be used in the required and forbidden patterns. It will be replaced by the real file name.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "file_length",
        "name": "File Line Length",
        "severity": "MAJOR",
        "description": "Files should not span too many lines.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "30min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "file_name",
        "name": "File Name",
        "severity": "MINOR",
        "description": "File name should match a type or extension declared in the file (if any).",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "file_types_order",
        "name": "File Types Order",
        "severity": "MINOR",
        "description": "Specifies how the types within a file should be ordered.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "first_where",
        "name": "First Where",
        "severity": "MINOR",
        "description": "Prefer using `.first(where:)` over `.filter { }.first` in collections.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "for_where",
        "name": "For Where",
        "severity": "MINOR",
        "description": "`where` clauses are preferred over a single `if` inside a `for`.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "force_cast",
        "name": "Force Cast",
        "severity": "MAJOR",
        "description": "Force casts should be avoided.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "BUG"
    },
    {
        "key": "force_try",
        "name": "Force Try",
        "severity": "MAJOR",
        "description": "Force tries should be avoided.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "BUG"
    },
    {
        "key": "force_unwrapping",
        "name": "Force Unwrapping",
        "severity": "MAJOR",
        "description": "Force unwrapping should be avoided.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "function_body_length",
        "name": "Function Body Length",
        "severity": "MAJOR",
        "description": "Functions bodies should not span too many lines.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "30min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "function_default_parameter_at_end",
        "name": "Function Default Parameter at End",
        "severity": "MINOR",
        "description": "Prefer to locate parameters with defaults toward the end of the parameter list.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "function_parameter_count",
        "name": "Function Parameter Count",
        "severity": "MINOR",
        "description": "Number of function parameters should be low.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "30min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "generic_type_name",
        "name": "Generic Type Name",
        "severity": "MINOR",
        "description": "Generic type name should only contain alphanumeric characters, start with an uppercase character and span between 1 and 20 characters in length.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "identical_operands",
        "name": "Identical Operands",
        "severity": "MINOR",
        "description": "Comparing two identical operands is likely a mistake.",
        "type": "BUG",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "identifier_name",
        "name": "Identifier Name",
        "severity": "MINOR",
        "description": "Identifier names should only contain alphanumeric characters and start with a lowercase character or should only contain capital letters. In an exception to the above, variable names may start with a capital letter when they are declared static and immutable. Variable names should not be too long or too short.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "implicit_getter",
        "name": "Implicit Getter",
        "severity": "MINOR",
        "description": "Computed read-only properties and subscripts should avoid using the get keyword.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "implicit_return",
        "name": "Implicit Return",
        "severity": "MINOR",
        "description": "Prefer implicit returns in closures.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "implicitly_unwrapped_optional",
        "name": "Implicitly Unwrapped Optional",
        "severity": "MINOR",
        "description": "Implicitly unwrapped optionals should be avoided when possible.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "inert_defer",
        "name": "Inert Defer",
        "severity": "MINOR",
        "description": "If defer is at the end of its parent scope, it will be executed right where it is anyway.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "is_disjoint",
        "name": "Is Disjoint",
        "severity": "MINOR",
        "description": "Prefer using `Set.isDisjoint(with:)` over `Set.intersection(_:).isEmpty`.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "joined_default_parameter",
        "name": "Joined Default Parameter",
        "severity": "MINOR",
        "description": "Discouraged explicit usage of the default separator.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "large_tuple",
        "name": "Large Tuple",
        "severity": "MINOR",
        "description": "Tuples shouldn't have too many members. Create a custom type instead.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "last_where",
        "name": "Last Where",
        "severity": "MINOR",
        "description": "Prefer using `.last(where:)` over `.filter { }.last` in collections.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "leading_whitespace",
        "name": "Leading Whitespace",
        "severity": "MINOR",
        "description": "Files should not contain leading whitespace.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "legacy_cggeometry_functions",
        "name": "Legacy CGGeometry Functions",
        "severity": "MINOR",
        "description": "Struct extension properties and methods are preferred over legacy functions",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "legacy_constant",
        "name": "Legacy Constant",
        "severity": "MINOR",
        "description": "Struct-scoped constants are preferred over legacy global constants.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "legacy_constructor",
        "name": "Legacy Constructor",
        "severity": "MINOR",
        "description": "Swift constructors are preferred over legacy convenience functions.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "legacy_hashing",
        "name": "Legacy Hashing",
        "severity": "MINOR",
        "description": "Prefer using the `hash(into:)` function instead of overriding `hashValue`",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "legacy_multiple",
        "name": "Legacy Multiple",
        "severity": "MINOR",
        "description": "Prefer using the `isMultiple(of:)` function instead of using the remainder operator (`%`).",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "legacy_nsgeometry_functions",
        "name": "Legacy NSGeometry Functions",
        "severity": "MINOR",
        "description": "Struct extension properties and methods are preferred over legacy functions",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "legacy_random",
        "name": "Legacy Random",
        "severity": "MINOR",
        "description": "Prefer using `type.random(in:)` over legacy functions.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "let_var_whitespace",
        "name": "Variable Declaration Whitespace",
        "severity": "MINOR",
        "description": "Let and var should be separated from other statements by a blank line.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "line_length",
        "name": "Line Length",
        "severity": "MAJOR",
        "description": "Lines should not span too many characters.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "literal_expression_end_indentation",
        "name": "Literal Expression End Indentation",
        "severity": "MINOR",
        "description": "Array and dictionary literal end should have the same indentation as the line that started it.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "lower_acl_than_parent",
        "name": "Lower ACL than parent",
        "severity": "MINOR",
        "description": "Ensure definitions have a lower access control level than their enclosing parent",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "mark",
        "name": "Mark",
        "severity": "MINOR",
        "description": "MARK comment should be in valid format. e.g. '// MARK: ...' or '// MARK: - ...'",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "missing_docs",
        "name": "Missing Docs",
        "severity": "MINOR",
        "description": "Declarations should be documented.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "modifier_order",
        "name": "Modifier Order",
        "severity": "MINOR",
        "description": "Modifier order should be consistent.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "multiline_arguments",
        "name": "Multiline Arguments",
        "severity": "MINOR",
        "description": "Arguments should be either on the same line, or one per line.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "multiline_arguments_brackets",
        "name": "Multiline Arguments Brackets",
        "severity": "MINOR",
        "description": "Multiline arguments should have their surrounding brackets in a new line.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "multiline_function_chains",
        "name": "Multiline Function Chains",
        "severity": "MINOR",
        "description": "Chained function calls should be either on the same line, or one per line.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "multiline_literal_brackets",
        "name": "Multiline Literal Brackets",
        "severity": "MINOR",
        "description": "Multiline literals should have their surrounding brackets in a new line.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "multiline_parameters",
        "name": "Multiline Parameters",
        "severity": "MINOR",
        "description": "Functions and methods parameters should be either on the same line, or one per line.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "multiline_parameters_brackets",
        "name": "Multiline Parameters Brackets",
        "severity": "MINOR",
        "description": "Multiline parameters should have their surrounding brackets in a new line.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "multiple_closures_with_trailing_closure",
        "name": "Multiple Closures with Trailing Closure",
        "severity": "MINOR",
        "description": "Trailing closure syntax should not be used when passing more than one closure argument.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "nesting",
        "name": "Nesting",
        "severity": "CRITICAL",
        "description": "Types should be nested at most 1 level deep, and statements should be nested at most 5 levels deep.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "30min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "nimble_operator",
        "name": "Nimble Operator",
        "severity": "MINOR",
        "description": "Prefer Nimble operator overloads over free matcher functions.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "no_extension_access_modifier",
        "name": "No Extension Access Modifier",
        "severity": "MINOR",
        "description": "Prefer not to use extension access modifiers",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "no_fallthrough_only",
        "name": "No Fallthrough Only",
        "severity": "MINOR",
        "description": "Fallthroughs can only be used if the `case` contains at least one other statement.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "no_grouping_extension",
        "name": "No Grouping Extension",
        "severity": "MINOR",
        "description": "Extensions shouldn't be used to group code within the same source file.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "no_space_in_method_call",
        "name": "No Space in Method Call",
        "severity": "MINOR",
        "description": "Don't add a space between the method name and the parentheses.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "notification_center_detachment",
        "name": "Notification Center Detachment",
        "severity": "MINOR",
        "description": "An object should only remove itself as an observer in `deinit`.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "nslocalizedstring_key",
        "name": "NSLocalizedString Key",
        "severity": "MINOR",
        "description": "Static strings should be used as key in NSLocalizedString in order to genstrings work.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "nslocalizedstring_require_bundle",
        "name": "NSLocalizedString Require Bundle",
        "severity": "MINOR",
        "description": "Calls to NSLocalizedString should specify the bundle which contains the strings file.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "nsobject_prefer_isequal",
        "name": "NSObject Prefer isEqual",
        "severity": "MINOR",
        "description": "NSObject subclasses should implement isEqual instead of ==.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "number_separator",
        "name": "Number Separator",
        "severity": "MINOR",
        "description": "Underscores should be used as thousand separator in large decimal numbers.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "object_literal",
        "name": "Object Literal",
        "severity": "MINOR",
        "description": "Prefer object literals over image and color inits.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "opening_brace",
        "name": "Opening Brace Spacing",
        "severity": "MINOR",
        "description": "Opening braces should be preceded by a single space and on the same line as the declaration.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "operator_usage_whitespace",
        "name": "Operator Usage Whitespace",
        "severity": "MINOR",
        "description": "Operators should be surrounded by a single whitespace when they are being used.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "operator_whitespace",
        "name": "Operator Function Whitespace",
        "severity": "MINOR",
        "description": "Operators should be surrounded by a single whitespace when defining them.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "overridden_super_call",
        "name": "Overridden methods call super",
        "severity": "MINOR",
        "description": "Some overridden methods should always call super",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "override_in_extension",
        "name": "Override in Extension",
        "severity": "MINOR",
        "description": "Extensions shouldn't override declarations.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "pattern_matching_keywords",
        "name": "Pattern Matching Keywords",
        "severity": "MINOR",
        "description": "Combine multiple pattern matching bindings by moving keywords out of tuples.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "prefixed_toplevel_constant",
        "name": "Prefixed Top-Level Constant",
        "severity": "MINOR",
        "description": "Top-level constants should be prefixed by `k`.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "private_action",
        "name": "Private Actions",
        "severity": "MINOR",
        "description": "IBActions should be private.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "private_outlet",
        "name": "Private Outlets",
        "severity": "MINOR",
        "description": "IBOutlets should be private to avoid leaking UIKit to higher layers.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "private_over_fileprivate",
        "name": "Private over fileprivate",
        "severity": "MINOR",
        "description": "Prefer `private` over `fileprivate` declarations.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "private_unit_test",
        "name": "Private Unit Test",
        "severity": "MINOR",
        "description": "Unit tests marked private are silently skipped.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "prohibited_interface_builder",
        "name": "Prohibited Interface Builder",
        "severity": "MINOR",
        "description": "Creating views using Interface Builder should be avoided.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "15min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "prohibited_super_call",
        "name": "Prohibited calls to super",
        "severity": "MINOR",
        "description": "Some methods should not call super",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "protocol_property_accessors_order",
        "name": "Protocol Property Accessors Order",
        "severity": "MINOR",
        "description": "When declaring properties in protocols, the order of accessors should be `get set`.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "quick_discouraged_call",
        "name": "Quick Discouraged Call",
        "severity": "MINOR",
        "description": "Discouraged call inside 'describe' and/or 'context' block.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "quick_discouraged_focused_test",
        "name": "Quick Discouraged Focused Test",
        "severity": "MINOR",
        "description": "Discouraged focused test. Other tests won't run while this one is focused.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "quick_discouraged_pending_test",
        "name": "Quick Discouraged Pending Test",
        "severity": "MINOR",
        "description": "Discouraged pending test. This test won't run while it's marked as pending.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "reduce_boolean",
        "name": "Reduce Boolean",
        "severity": "MINOR",
        "description": "Prefer using `.allSatisfy()` or `.contains()` over `reduce(true)` or `reduce(false)`",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "reduce_into",
        "name": "Reduce Into",
        "severity": "MINOR",
        "description": "Prefer `reduce(into:_:)` over `reduce(_:_:)` for copy-on-write types",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "redundant_discardable_let",
        "name": "Redundant Discardable Let",
        "severity": "MINOR",
        "description": "Prefer `_ = foo()` over `let _ = foo()` when discarding a result from a function.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "redundant_nil_coalescing",
        "name": "Redundant Nil Coalescing",
        "severity": "MINOR",
        "description": "nil coalescing operator is only evaluated if the lhs is nil, coalescing operator with nil as rhs is redundant",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "redundant_objc_attribute",
        "name": "Redundant @objc Attribute",
        "severity": "MINOR",
        "description": "Objective-C attribute (@objc) is redundant in declaration.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "redundant_optional_initialization",
        "name": "Redundant Optional Initialization",
        "severity": "MINOR",
        "description": "Initializing an optional variable with nil is redundant.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "redundant_set_access_control",
        "name": "Redundant Set Access Control",
        "severity": "MINOR",
        "description": "Property setter access level shouldn't be explicit if it's the same as the variable access level.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "redundant_string_enum_value",
        "name": "Redundant String Enum Value",
        "severity": "MINOR",
        "description": "String enum values can be omitted when they are equal to the enumcase name.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "redundant_type_annotation",
        "name": "Redundant Type Annotation",
        "severity": "MINOR",
        "description": "Variables should not have redundant type annotation",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "redundant_void_return",
        "name": "Redundant Void Return",
        "severity": "MINOR",
        "description": "Returning Void in a function declaration is redundant.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "required_deinit",
        "name": "Required Deinit",
        "severity": "MINOR",
        "description": "Classes should have an explicit deinit method.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "required_enum_case",
        "name": "Required Enum Case",
        "severity": "MINOR",
        "description": "Enums conforming to a specified protocol must implement a specific case(s).",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "return_arrow_whitespace",
        "name": "Returning Whitespace",
        "severity": "MINOR",
        "description": "Return arrow and return type should be separated by a single space or on a separate line.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "shorthand_operator",
        "name": "Shorthand Operator",
        "severity": "MINOR",
        "description": "Prefer shorthand operators (+=, -=, *=, /=) over doing the operation and assigning.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "single_test_class",
        "name": "Single Test Class",
        "severity": "MINOR",
        "description": "Test files should contain a single QuickSpec or XCTestCase class.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "sorted_first_last",
        "name": "Min or Max over Sorted First or Last",
        "severity": "MINOR",
        "description": "Prefer using `min()` or `max()` over `sorted().first` or `sorted().last`",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "sorted_imports",
        "name": "Sorted Imports",
        "severity": "MINOR",
        "description": "Imports should be sorted.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "statement_position",
        "name": "Statement Position",
        "severity": "MINOR",
        "description": "Else and catch should be on the same line, one space after the previous declaration.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "static_operator",
        "name": "Static Operator",
        "severity": "MINOR",
        "description": "Operators should be declared as static functions, not free functions.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "10min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "strict_fileprivate",
        "name": "Strict fileprivate",
        "severity": "MINOR",
        "description": "`fileprivate` should be avoided.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "strong_iboutlet",
        "name": "Strong IBOutlet",
        "severity": "MINOR",
        "description": "@IBOutlets shouldn't be declared as weak.",
        "type": "BUG",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "superfluous_disable_command",
        "name": "Superfluous Disable Command",
        "severity": "MINOR",
        "description": "SwiftLint 'disable' commands are superfluous when the disabled rule would not have triggered a violation in the disabled region. Use \" - \" if you wish to document a command.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "switch_case_alignment",
        "name": "Switch and Case Statement Alignment",
        "severity": "MINOR",
        "description": "Case statements should vertically align with their enclosing switch statement, or indented if configured otherwise.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "switch_case_on_newline",
        "name": "Switch Case on Newline",
        "severity": "MINOR",
        "description": "Cases inside a switch should always be on a newline",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "syntactic_sugar",
        "name": "Syntactic Sugar",
        "severity": "MINOR",
        "description": "Shorthand syntactic sugar should be used, i.e. [Int] instead of Array<Int>.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "todo",
        "name": "Todo",
        "severity": "MINOR",
        "description": "TODOs and FIXMEs should be resolved.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "toggle_bool",
        "name": "Toggle Bool",
        "severity": "MINOR",
        "description": "Prefer `someBool.toggle()` over `someBool = !someBool`.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "trailing_closure",
        "name": "Trailing Closure",
        "severity": "MINOR",
        "description": "Trailing closure syntax should be used whenever possible.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "trailing_comma",
        "name": "Trailing Comma",
        "severity": "MINOR",
        "description": "Trailing commas in arrays and dictionaries should be avoided/enforced.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "trailing_newline",
        "name": "Trailing Newline",
        "severity": "MINOR",
        "description": "Files should have a single trailing newline.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "trailing_semicolon",
        "name": "Trailing Semicolon",
        "severity": "MINOR",
        "description": "Lines should not have trailing semicolons.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "trailing_whitespace",
        "name": "Trailing Whitespace",
        "severity": "MINOR",
        "description": "Lines should not have trailing whitespace.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "type_body_length",
        "name": "Type Body Length",
        "severity": "MAJOR",
        "description": "Type bodies should not span too many lines.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "30min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "type_contents_order",
        "name": "Type Contents Order",
        "severity": "MINOR",
        "description": "Specifies the order of subtypes, properties, methods & more within a type.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "type_name",
        "name": "Type Name",
        "severity": "MINOR",
        "description": "Type name should only contain alphanumeric characters, start with an uppercase character and span between 3 and 40 characters in length.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "unavailable_function",
        "name": "Unavailable Function",
        "severity": "MINOR",
        "description": "Unimplemented functions should be marked as unavailable.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "unneeded_break_in_switch",
        "name": "Unneeded Break in Switch",
        "severity": "MINOR",
        "description": "Avoid using unneeded break statements.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "unneeded_parentheses_in_closure_argument",
        "name": "Unneeded Parentheses in Closure Argument",
        "severity": "MINOR",
        "description": "Parentheses are not needed when declaring closure arguments.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "unowned_variable_capture",
        "name": "Unowned Variable Capture",
        "severity": "MINOR",
        "description": "Prefer capturing references as weak to avoid potential crashes.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "BUG"
    },
    {
        "key": "untyped_error_in_catch",
        "name": "Untyped Error in Catch",
        "severity": "MINOR",
        "description": "Catch statements should not declare error variables without type casting.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "unused_capture_list",
        "name": "Unused Capture List",
        "severity": "MINOR",
        "description": "Unused reference in a capture list should be removed.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "unused_closure_parameter",
        "name": "Unused Closure Parameter",
        "severity": "MINOR",
        "description": "Unused parameter in a closure should be replaced with _.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "unused_control_flow_label",
        "name": "Unused Control Flow Label",
        "severity": "MINOR",
        "description": "Unused control flow label should be removed.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "unused_declaration",
        "name": "Unused Declaration",
        "severity": "MINOR",
        "description": "Declarations should be referenced at least once within all files linted.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "BUG"
    },
    {
        "key": "unused_enumerated",
        "name": "Unused Enumerated",
        "severity": "MINOR",
        "description": "When the index or the item is not used, `.enumerated()` can be removed.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "unused_import",
        "name": "Unused Import",
        "severity": "MINOR",
        "description": "All imported modules should be required to make the file compile.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "unused_optional_binding",
        "name": "Unused Optional Binding",
        "severity": "MINOR",
        "description": "Prefer `!= nil` over `let _ =`",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "unused_setter_value",
        "name": "Unused Setter Value",
        "severity": "MINOR",
        "description": "Setter value is not used.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "valid_ibinspectable",
        "name": "Valid IBInspectable",
        "severity": "MINOR",
        "description": "@IBInspectable should be applied to variables only, have its type explicit and be of a supported type",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "vertical_parameter_alignment",
        "name": "Vertical Parameter Alignment",
        "severity": "MINOR",
        "description": "Function parameters should be aligned vertically if they're in multiple lines in a declaration.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "vertical_parameter_alignment_on_call",
        "name": "Vertical Parameter Alignment On Call",
        "severity": "MINOR",
        "description": "Function parameters should be aligned vertically if they're in multiple lines in a method call.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "vertical_whitespace",
        "name": "Vertical Whitespace",
        "severity": "MINOR",
        "description": "Limit vertical whitespace to a single empty line.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "vertical_whitespace_between_cases",
        "name": "Vertical Whitespace Between Cases",
        "severity": "MINOR",
        "description": "Include a single empty line between switch cases.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "vertical_whitespace_closing_braces",
        "name": "Vertical Whitespace before Closing Braces",
        "severity": "MINOR",
        "description": "Don't include vertical whitespace (empty line) before closing braces.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "vertical_whitespace_opening_braces",
        "name": "Vertical Whitespace after Opening Braces",
        "severity": "MINOR",
        "description": "Don't include vertical whitespace (empty line) after opening braces.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "void_return",
        "name": "Void Return",
        "severity": "MINOR",
        "description": "Prefer `-> Void` over `-> ()`.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "weak_delegate",
        "name": "Weak Delegate",
        "severity": "MINOR",
        "description": "Delegates should be weak to avoid reference cycles.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "10min"
        },
        "type": "BUG"
    },
    {
        "key": "xct_specific_matcher",
        "name": "XCTest Specific Matcher",
        "severity": "MINOR",
        "description": "Prefer specific XCTest matchers over `XCTAssertEqual` and `XCTAssertNotEqual`",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "xctfail_message",
        "name": "XCTFail Message",
        "severity": "MINOR",
        "description": "An XCTFail call should include a description of the assertion.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "yoda_condition",
        "name": "Yoda condition rule",
        "severity": "MINOR",
        "description": "The variable should be placed on the left, the constant on the right of a comparison operator.",
        "debt": {
            "function": "CONSTANT_ISSUE",
            "offset": "5min"
        },
        "type": "CODE_SMELL"
    },
    {
        "key": "anonymous_argument_in_multiline_closure",
        "name": "Anonymous Argument in Multiline Closure",
        "description": "Use named arguments in multiline closures",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "balanced_xctest_lifecycle",
        "name": "Balanced XCTest life-cycle",
        "description": "Test classes must implement balanced setUp and tearDown methods.",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "capture_variable",
        "name": "Capture Variable",
        "description": "Non-constant variables should not be listed in a closure's capture list to avoid confusion about closures capturing variables at creation time.",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "comment_spacing",
        "name": "Comment Spacing",
        "description": "Prefer at least one space after slashes for comments.",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "computed_accessors_order",
        "name": "Computed Accessors Order",
        "description": "Getter and setters in computed properties and subscripts should be in a consistent order.",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "contains_over_range_nil_comparison",
        "name": "Contains over range(of:) comparison to nil",
        "description": "Prefer `contains` over `range(of:) != nil` and `range(of:) == nil`.",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "discouraged_assert",
        "name": "Discouraged Assert",
        "description": "Prefer `assertionFailure()` and/or `preconditionFailure()` over `assert(false)`",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "discouraged_none_name",
        "name": "Discouraged None Name",
        "description": "Discourages name cases/static members `none`, which can conflict with `Optional<T>.none`.",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "duplicated_key_in_dictionary_literal",
        "name": "Duplicated Key in Dictionary Literal",
        "description": "Dictionary literals with duplicated keys will crash in runtime.",
        "severity": "BLOCKER",
        "type": "BUG",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "enum_case_associated_values_count",
        "name": "Enum Case Associated Values Count",
        "description": "Number of associated values in an enum case should be low",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "expiring_todo",
        "name": "ExpiringTodo",
        "description": "TODOs and FIXMEs should be resolved prior to their expiry date.",
        "severity": "CRITICAL",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "10min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "file_name_no_space",
        "name": "File Name No Space",
        "description": "File name should not contain any whitespace.",
        "severity": "CRITICAL",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "flatmap_over_map_reduce",
        "name": "FlatMap over map and reduce",
        "description": "Prefer `flatMap` over `map` followed by `reduce([], +)`.",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "ibinspectable_in_extension",
        "name": "IBInspectable in Extension",
        "description": "Extensions shouldn't add @IBInspectable properties.",
        "severity": "CRITICAL",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "inclusive_language",
        "name": "Inclusive Language",
        "description": "Identifiers should use inclusive language that avoids discrimination against groups of people based on race, gender, or socioeconomic status",
        "severity": "CRITICAL",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "indentation_width",
        "name": "Indentation Width",
        "description": "Indent code using either one tab or the configured amount of spaces, unindent to match previous indentations. Don't indent the first line.",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "legacy_objc_type",
        "name": "Legacy Objective-C Reference Type",
        "description": "Prefer Swift value types to bridged Objective-C reference types",
        "severity": "CRITICAL",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "optional_enum_case_matching",
        "name": "Optional Enum Case Match",
        "description": "Matching an enum case against an optional enum without '?' is supported on Swift 5.1 and above.",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "orphaned_doc_comment",
        "name": "Orphaned Doc Comment",
        "description": "A doc comment should be attached to a declaration.",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "prefer_nimble",
        "name": "Prefer Nimble",
        "description": "Prefer Nimble matchers over XCTAssert functions.",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "prefer_self_in_static_references",
        "name": "Prefer Self in Static References",
        "description": "Static references should be prefixed by `Self` instead of the class name.",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "prefer_self_type_over_type_of_self",
        "name": "Prefer Self Type Over Type of Self",
        "description": "Prefer `Self` over `type(of: self)` when accessing properties or calling methods.",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "prefer_zero_over_explicit_init",
        "name": "Prefer Zero Over Explicit Init",
        "description": "Prefer `.zero` over explicit init with zero parameters (e.g. `CGPoint(x: 0, y: 0)`)",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "private_subject",
        "name": "Private Combine Subject",
        "description": "Combine Subject should be private.",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "raw_value_for_camel_cased_codable_enum",
        "name": "Raw Value For Camel Cased Codable Enum",
        "description": "Camel cased cases of Codable String enums should have raw value.",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "self_in_property_initialization",
        "name": "Self in Property Initialization",
        "description": "`self` refers to the unapplied `NSObject.self()` method, which is likely not expected. Make the variable `lazy` to be able to refer to the current instance or use `ClassName.self`.",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "test_case_accessibility",
        "name": "Test case accessibility",
        "description": "Test cases should only contain private non-test members.",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "1min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "accessibility_label_for_image",
        "name": "Accessibility Label for Image",
        "description": "All Images that provide context should have an accessibility label. Purely decorative images can be hidden from accessibility.",
        "severity": "CRITICAL",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "comma_inheritance",
        "name": "Comma Inheritance",
        "description": "Use commas to separate types in inheritance lists",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "return_value_from_void_function",
        "name": "Return Value from Void Function",
        "description": "Returning values from Void functions should be avoided.",
        "severity": "CRITICAL",
        "type": "BUG",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "typesafe_array_init",
        "name": "Type-safe Array Init",
        "description": "Prefer using `Array(seq)` over `seq.map { $0 }` to convert a sequence into an Array.",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "unavailable_condition",
        "name": "Unavailable Condition",
        "description": "Use #unavailable instead of #available with an empty body.",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "void_function_in_ternary",
        "name": "Void Function in Ternary",
        "description": "Using ternary to call Void functions should be avoided.",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    }
]