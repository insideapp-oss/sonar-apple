[
    {
        "key": "bitwise-operator-in-conditional",
        "name": "Bitwise operator in conditional",
        "severity": "MAJOR",
        "description": "Checks for bitwise operations in conditionals. Although being written on purpose in some rare cases, bitwise operations are considered to be too \u201csmart\u201d. Smart code is not easy to understand.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "broken-nil-check",
        "name": "Broken nil check",
        "severity": "CRITICAL",
        "description": "The broken nil check in Objective-C in some cases returns just the opposite result.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "broken-null-check",
        "name": "Broken null check",
        "severity": "CRITICAL",
        "description": "The broken null check itself will crash the program.",
        "type": "BUG",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "broken-oddness-check",
        "name": "Broken oddness check",
        "severity": "CRITICAL",
        "description": "Checking oddness by x%2==1 won\u2019t work for negative numbers. Use x&1==1 or x%2!=0 instead.",
        "type": "BUG",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "collapsible-if-statements",
        "name": "Collapsible if statements",
        "severity": "MAJOR",
        "description": "This rule detects instances where the conditions of two consecutive if statements can be combined into one in order to increase code cleanness and readability.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "constant-conditional-operator",
        "name": "Constant conditional operator",
        "severity": "CRITICAL",
        "description": "conditionaloperator whose conditionals are always true or always false are confusing.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "constant-if-expression",
        "name": "Constant if expression",
        "severity": "CRITICAL",
        "description": "if statements whose conditionals are always true or always false are confusing.",
        "type": "BUG",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "dead-code",
        "name": "Dead code",
        "severity": "CRITICAL",
        "description": "Code after return, break, continue, and throw statements is unreachable and will never be executed.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "double-negative",
        "name": "Double negative",
        "severity": "MAJOR",
        "description": "There is no point in using a double negative, it is always positive.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "for-loop-should-be-while-loop",
        "name": "For loop should be while loop",
        "severity": "MAJOR",
        "description": "Under certain circumstances, some for loops can be simplified to while loops to make code more concise.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "goto-statement",
        "name": "Goto statement",
        "severity": "CRITICAL",
        "description": "\u201cGo To Statement Considered Harmful\u201d",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "10min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "jumbled-incrementer",
        "name": "Jumbled incrementer",
        "severity": "BLOCKER",
        "description": "Jumbled incrementers are usually typos. If it\u2019s done on purpose, it\u2019s very confusing for code readers.",
        "type": "BUG",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "misplaced-nil-check",
        "name": "Misplaced nil check",
        "severity": "CRITICAL",
        "description": "The nil check is misplaced. In Objective-C, sending a message to a nil pointer simply does nothing. But code readers may be confused about the misplaced nil check.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "misplaced-null-check",
        "name": "Misplaced null check",
        "severity": "BLOCKER",
        "description": "The null check is misplaced. In C and C++, sending a message to a null pointer could crash the program. When null is misplaced, either the check is useless or it\u2019s incorrect.",
        "type": "BUG",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "multiple-unary-operator",
        "name": "Multiple unary operator",
        "severity": "MAJOR",
        "description": "Multiple unary operator can always be confusing and should be simplified.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "return-from-finally-block",
        "name": "Return from finally block",
        "severity": "MAJOR",
        "description": "Returning from a finally block is not recommended.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "throw-exception-from-finally-block",
        "name": "Throw exception from finally block",
        "severity": "CRITICAL",
        "description": "Throwing exceptions within a finally block may mask other exceptions or code defects.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "calling-prohibited-method",
        "name": "Calling prohibited method",
        "severity": "BLOCKER",
        "description": "When a method is declared with __attribute__((annotate(\"oclint:enforce[prohibitedmethod]\"))) annotation, all of its usages will be prohibited.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "calling-protected-method",
        "name": "Calling protected method",
        "severity": "CRITICAL",
        "description": "Even though there is no protected in Objective-C language level, in a design\u2019s perspective, we sometimes hope to enforce a method only be used inside the class itself or by its subclass. This rule mimics the protected behavior, and alerts developers when a method is called outside its access scope.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "missing-abstract-method-implementation",
        "name": "Missing abstract method implementation",
        "severity": "MAJOR",
        "description": "While Objective-C language allows abstract methods to be declared without implementations, this rule tries to verify if the subclass implements the correct abstract methods.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "missing-call-to-base-method",
        "name": "Missing call to base method",
        "severity": "CRITICAL",
        "description": "When a method is declared with __attribute__((annotate(\"oclint:enforce[basemethod]\"))) annotation, all of its implementations (including its own and its subclasses) must call the method implementation in super class.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "missing-hash-method",
        "name": "Missing hash method",
        "severity": "CRITICAL",
        "description": "When isEqual method is overridden, hash method must be overridden, too.",
        "type": "BUG",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "assign-ivar-outside-accessors",
        "name": "Assign ivar outside accessors",
        "severity": "MAJOR",
        "description": "This rule prevents assigning an ivar outside of getters, setters, and init method.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "avoid-branching-statement-as-last-in-loop",
        "name": "Avoid branching statement as last in loop",
        "severity": "BLOCKER",
        "description": "Having branching statement as the last statement inside a loop is likely a bug.",
        "type": "BUG",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "destructor-of-virtual-class",
        "name": "Destructor of virtual class",
        "severity": "CRITICAL",
        "description": "This rule enforces the destructor of a virtual class must be virtual.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "inverted-logic",
        "name": "Inverted logic",
        "severity": "CRITICAL",
        "description": "An inverted logic is hard to understand.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "misplaced-default-label",
        "name": "Misplaced default label",
        "severity": "BLOCKER",
        "description": "It is very confusing when default label is not the last label in a switch statement.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "missing-break-in-switch-statement",
        "name": "Missing break in switch statement",
        "severity": "BLOCKER",
        "description": "A switch case without a break statement is likely a bug.",
        "type": "BUG",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "missing-default-statement",
        "name": "Missing default statement",
        "severity": "CRITICAL",
        "description": "Switch statements should have a default statement.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "non-case-label-in-switch-statement",
        "name": "Non case label in switch statement",
        "severity": "CRITICAL",
        "description": "It is very confusing when label becomes part of the switch statement.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "parameter-reassignment",
        "name": "Parameter reassignment",
        "severity": "BLOCKER",
        "description": "Reassigning values to parameters is very problematic in most cases.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "prefer-early-exit",
        "name": "Prefer early exit",
        "severity": "MAJOR",
        "description": "Early exits can reduce the indentation of a block of code, so that reader do not have to remember all the previous decisions, therefore, makes it easier to understand the code.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "10min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "problematic-base-class-destructor",
        "name": "Problematic base class destructor",
        "severity": "MAJOR",
        "description": "Make base class destructor public and virtual, or protected and nonvirtual",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "too-few-branches-in-switch-statement",
        "name": "Too few branches in switch statement",
        "severity": "MAJOR",
        "description": "To increase code readability, when a switch consists of only a few branches, it\u2019s much better to use an if statement instead.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "unnecessary-default-statement",
        "name": "Unnecessary default statement",
        "severity": "MAJOR",
        "description": "When a switch statement covers all possible cases, a default label is not needed and should be removed. If the switch is not fully covered, the SwitchStatementsShouldHaveDefault rule will report.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "branch-divergence",
        "name": "Branch divergence",
        "severity": "CRITICAL",
        "description": "Branch divergence is quite expensive and needs to be avoided as much as possible.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "avoid-default-arguments-on-virtual-methods",
        "name": "Avoid default arguments on virtual methods",
        "severity": "CRITICAL",
        "description": "Giving virtual functions default argument initializers tends to defeat polymorphism and introduce unnecessary complexity into a class hierarchy.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "avoid-private-static-members",
        "name": "Avoid private static members",
        "severity": "MAJOR",
        "description": "Having static members is easier to harm encapsulation.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "empty-catch-statement",
        "name": "Empty catch statement",
        "severity": "CRITICAL",
        "description": "This rule detects instances where an exception is caught, but nothing is done about it.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "empty-do-while-statement",
        "name": "Empty do while statement",
        "severity": "CRITICAL",
        "description": "This rule detects instances where do-while statement does nothing.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "empty-else-block",
        "name": "Empty else block",
        "severity": "CRITICAL",
        "description": "This rule detects instances where an else statement does nothing.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "empty-finally-statement",
        "name": "Empty finally statement",
        "severity": "CRITICAL",
        "description": "This rule detects instances where a finally statement does nothing.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "empty-for-statement",
        "name": "Empty for statement",
        "severity": "CRITICAL",
        "description": "This rule detects instances where a for statement does nothing.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "empty-if-statement",
        "name": "Empty if statement",
        "severity": "CRITICAL",
        "description": "This rule detects instances where a condition is checked, but nothing is done about it.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "empty-switch-statement",
        "name": "Empty switch statement",
        "severity": "CRITICAL",
        "description": "This rule detects instances where a switch statement does nothing.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "empty-try-statement",
        "name": "Empty try statement",
        "severity": "CRITICAL",
        "description": "This rule detects instances where a try statement is empty.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "empty-while-statement",
        "name": "Empty while statement",
        "severity": "CRITICAL",
        "description": "This rule detects instances where a while statement does nothing.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "use-boxed-expression",
        "name": "Use boxed expression",
        "severity": "MAJOR",
        "description": "This rule locates the places that can be migrated to the Objective-C literals with boxed expressions.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "use-container-literal",
        "name": "Use container literal",
        "severity": "MAJOR",
        "description": "This rule locates the places that can be migrated to the Objective-C container literals.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "use-number-literal",
        "name": "Use number literal",
        "severity": "MAJOR",
        "description": "This rule locates the places that can be migrated to the Objective-C number literals.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "use-object-subscripting",
        "name": "Use object subscripting",
        "severity": "MAJOR",
        "description": "This rule locates the places that can be migrated to the Objective-C literals with object subscripting.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "long-variable-name",
        "name": "Long variable name",
        "severity": "MAJOR",
        "description": "Variables with long names harm readability.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "short-variable-name",
        "name": "Short variable name",
        "severity": "MAJOR",
        "description": "A variable with a short name is hard to understand what it stands for.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "redundant-conditional-operator",
        "name": "Redundant conditional operator",
        "severity": "MAJOR",
        "description": "This rule detects three types of redundant conditional operators:",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "redundant-if-statement",
        "name": "Redundant if statement",
        "severity": "MAJOR",
        "description": "This rule detects unnecessary if statements.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "redundant-local-variable",
        "name": "Redundant local variable",
        "severity": "MINOR",
        "description": "This rule detects cases where a variable declaration is immediately followed by a return of that variable.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "redundant-nil-check",
        "name": "Redundant nil check",
        "severity": "MINOR",
        "description": "C/C++-style null check in Objective-C like foo!=nil&&[foobar] is redundant, since sending a message to a nil object in this case simply returns a false-y value.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "unnecessary-else-statement",
        "name": "Unnecessary else statement",
        "severity": "MAJOR",
        "description": "When an if statement block ends with a return statement, or all branches in the if statement block end with return statements, then the else statement is unnecessary. The code in the else statement can be run without being in the block.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "unnecessary-null-check-for-dealloc",
        "name": "Unnecessary null check for dealloc",
        "severity": "MINOR",
        "description": "char*p=0;deletep; is valid. This rule locates unnecessary if(p) checks.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "useless-parentheses",
        "name": "Useless parentheses",
        "severity": "MINOR",
        "description": "This rule detects useless parentheses.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "deep-nested-block",
        "name": "Deep nested block",
        "severity": "CRITICAL",
        "description": "This rule indicates nested blocks deeper than the threshold.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "10min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "high-cyclomatic-complexity",
        "name": "High cyclomatic complexity",
        "severity": "CRITICAL",
        "description": "Cyclomatic complexity is determined by the number of linearly independent paths\nthrough a program\u2019s source code. In other words, cyclomatic complexity of a method\nis measured by the number of decision points, like if, while, and for\nstatements, plus one for the method entry.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "10min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "high-n-path-complexity",
        "name": "High n path complexity",
        "severity": "CRITICAL",
        "description": "NPath complexity is determined by the number of execution paths through that method.\nCompared to cyclomatic complexity, NPath complexity has two outstanding characteristics:\nfirst, it distinguishes between different kinds of control flow structures;\nsecond, it takes the various type of acyclic paths in a flow graph into consideration.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "10min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "high-ncss-method",
        "name": "High ncss method",
        "severity": "CRITICAL",
        "description": "This rule counts the Non-Commenting Source Statements (NCSS) of a method. NCSS only takes actual statements into consideration. In other words, it ignores empty statements, empty blocks, closing brackets, semicolons after closing brackets, and others. Meanwhile, a statement that is broken into multiple lines is counted only once.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "10min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "long-class",
        "name": "Long class",
        "severity": "CRITICAL",
        "description": "Long class generally indicates that it does too many things. Each class should be cohesive: does one thing and that one thing well.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "15min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "long-line",
        "name": "Long line",
        "severity": "MAJOR",
        "description": "Long lines are hard to read. Break them into multiple lines.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "long-method",
        "name": "Long method",
        "severity": "CRITICAL",
        "description": "Long method generally indicates that this method tries to do many things. Each method should do one thing and that one thing well.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "10min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "too-many-fields",
        "name": "Too many fields",
        "severity": "CRITICAL",
        "description": "A class with too many fields indicates it does too many things and lacks proper abstraction. It can be redesigned to have fewer fields.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "10min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "too-many-methods",
        "name": "Too many methods",
        "severity": "CRITICAL",
        "description": "A class with too many methods indicates it does too many things and is hard to read and understand. It usually contains complicated code, and should be refactored.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "10min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "too-many-parameters",
        "name": "Too many parameters",
        "severity": "CRITICAL",
        "description": "Methods with too many parameters are hard to understand and maintain, and are thirsty for refactorings, like Replace Parameter With method, Introduce Parameter Object, or Preserve Whole Object.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "10min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "unused-local-variable",
        "name": "Unused local variable",
        "severity": "MAJOR",
        "description": "This rule detects local variables that are declared, but not used.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    },
    {
        "key": "unused-method-parameter",
        "name": "Unused method parameter",
        "severity": "MAJOR",
        "description": "This rule detects parameters that are not used in the method.",
        "type": "CODE_SMELL",
        "debt": {
            "offset": "5min",
            "function": "CONSTANT_ISSUE"
        }
    }
]